#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# PLZ GOOGLE DON'T BAN ME, I'M ANALYZING MALWARES, BUT I KNOW WHAT I'M DOING

import warnings
import lief
import numpy as np
import argparse
from tqdm import tqdm
import random
import math
from sklearn.neighbors import NearestNeighbors
import tensorflow as tf
from keras.models import load_model
from keras.utils import plot_model
from keras import backend as K
from keras import metrics
import os
import logging
logging.getLogger("tensorflow").setLevel(logging.ERROR)
# Set random seeds to improve reproducibility
np.random.seed(1234)
tf.set_random_seed(1234)
warnings.filterwarnings("ignore")  # Hide messy Numpy warnings

from vis.visualization import visualize_saliency
from math import sqrt
from vis.utils import utils
from matplotlib import pyplot as plt
import matplotlib.cm as cm
import plotly.plotly as py
from plotly.offline import iplot, plot
import plotly.graph_objs as go
from plotly.tools import FigureFactory as ff
from string import printable


def bytez_to_numpy(bytez, maxlen, padding_char):
    b = np.ones((maxlen,), dtype=np.uint16) * padding_char
    bytez = np.frombuffer(bytez[:maxlen], dtype=np.uint8)
    b[:len(bytez)] = bytez
    return b

def numpy_to_bytez(np_bytez, padding_char):
    np_list = np_bytez.tolist()
    file_bytez = bytearray()
    for byte in np_list:
        try:
            file_bytez.append(byte)
        except ValueError:  # when meet padding
            return file_bytez
    return file_bytez

def get_file(filename, maxlen, padding_char):
    with open(filename, 'rb') as f:
        content = f.read()
    return bytez_to_numpy(content, maxlen, padding_char)

def main():
    parser = argparse.ArgumentParser(description='MalConv adversarial examples')
    parser.add_argument('filename', type=str)

    args = parser.parse_args()

    model = load_model('malconv.h5')
    maxlen = model.input_shape[1]
    padding_char = 256
    inp = np.asarray([get_file(args.filename, maxlen, padding_char)], dtype=np.uint16)
            
    whole_saliency_grad = visualize_saliency(model, -1, filter_indices=None, seed_input=inp, wrt_tensor=model.layers[1].output)
    whole_saliency_grad = whole_saliency_grad.reshape(-1, int(sqrt(whole_saliency_grad.shape[0])))
    layout= go.Layout(
        autosize=True,
        #width =  1200,
        height = 800,
        margin=dict(
            l=40,
            r=40,
            b=40,
            t=5
        ),
        hovermode="closest",
        xaxis = {'constrain': 'domain'},
        yaxis = { 'autorange': 'reversed',
                'showgrid':False,
                'showline':False,
                'zeroline':False,
                'scaleanchor': "x",
                'scaleratio':1},
    )

    #  Display element index on hover
    hover=list(range(whole_saliency_grad.shape[0]))
    for j in range(whole_saliency_grad.shape[0]):
        hover[j] = ["0x{0:02X}".format(i) for i in range(j*whole_saliency_grad.shape[1],(j+1)*whole_saliency_grad.shape[1])]


    data = [
        go.Heatmap(
            z=whole_saliency_grad,
            colorscale='jet',
            hoverinfo='text',
            text=hover
        )
    ]

    plot({"data": data, "layout": layout}, filename='{}.html'.format(args.filename.replace('.exe','')))

    LENGTH = 1024 #1024 * 1024
    LINE_LEN = 32
    saliency_grad = visualize_saliency(model, -1, filter_indices=None, seed_input=inp, wrt_tensor=model.layers[1].output)
    saliency_grad = saliency_grad[:LENGTH].reshape(-1, LINE_LEN)

    bytez = np.array(numpy_to_bytez(inp[0], padding_char)[:LENGTH]).reshape(-1, LINE_LEN).tolist()
    bytez_str = [[chr(x) if chr(x) in printable[:-5] else "{0:02X}".format(x) for x in chunk] for chunk in bytez]

    x = ["0x{0:02X}".format(i) for i in range(0, LINE_LEN)]#list(range(0,LINE_LEN))
    y = ["0x{0:02X}".format(i) for i in range(0, LENGTH, LINE_LEN)]
    x_text = ["{0:02X}".format(i) for i in range(0, LINE_LEN)]#list(range(0,LINE_LEN))
    y_text = ["{0:02X}".format(i) for i in range(0, LENGTH, LINE_LEN)]

    #  Display element index on hover
    hover=list(range(len(bytez_str)))
    for j in range(len(bytez_str)):
        hover[j] = ["0x{0:02X}".format(i) for i in range(j*LINE_LEN,(j+1)*LINE_LEN)]

    fig = ff.create_annotated_heatmap(saliency_grad, x=x, y=y, annotation_text=bytez_str, hoverinfo='text', text=hover, colorscale='jet')
    fig.layout.yaxis.autorange = 'reversed'
    fig.layout.xaxis.tickvals = x
    fig.layout.yaxis.tickvals = y
    fig.layout.xaxis.ticktext = x_text
    fig.layout.yaxis.ticktext = y_text
    fig.layout.height = 800
    plot(fig, filename='{}_HEAD.html'.format(args.filename.replace('.exe','')))




if __name__ == "__main__":
    main()
