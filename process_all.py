from malconv_adversarial import MalConv
from contextlib import contextmanager
import sys
import os
import tqdm

def nop(it, *a, **k):
    return it

tqdm.tqdm = nop

@contextmanager
def silence_stdout():
    new_target = open(os.devnull, "w")
    old_target = sys.stdout
    sys.stdout = new_target
    try:
        yield new_target
    finally:
        sys.stdout = old_target


# opposite adv example

_class = lambda p: 0 if p < 0.5 else 1
adv_class = lambda p: 1 if p < 0.5 else 0

just_analised_malwares = [mal.replace('.adversarial', '') for mal in os.listdir("MALWARES/WARNING") if '.adversarial' in mal]
print('{} malwares just analyzed'.format(len(just_analised_malwares)))
malwares = sorted([os.path.join("MALWARES/WARNING", mal) for mal in os.listdir("MALWARES/WARNING") if '.adversarial' not in mal and mal not in just_analised_malwares]) 
scores = []
pos = 0
with silence_stdout():
    model = MalConv()
    
    for malware in tqdm.tqdm_notebook(malwares):
        score = model.predict(malware)[0][0]
        adv_score = model.adversarial_embedding(malware, adv_class(score), header_only=True)
        scores.append(score)
        if _class(score) != _class(adv_score):
            pos+=1
            sys.stderr.write('\rlast: {} - {} out of {}'.format(score, pos ,len(scores)))
        else:
            sys.stderr.write('\r{}: {} - {} out of {}\n'.format(malware, score, pos ,len(scores)))

print('{} out of {}'.format(pos, len(scores)))
